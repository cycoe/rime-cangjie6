import os
import sys
import time
from shutil import copyfile, move

# something inserted around the user dict section
BEGIN = "# Begin user definition\n"
HINT = "# These lines between `Begin` and `End` is auto generated by merge.py\n"
END = "# End user definition\n"

INST_PATH = {
    "emacs": "/home/cycoe/.config/emacs/rime",
    "fcitx": "/home/cycoe/.config/fcitx/rime",
    "fcitx5": "/home/cycoe/.local/share/fcitx5/rime",
}
INST_FILE = [
    "./cangjie6.schema.yaml",
    "./cangjie6.extended.dict.yaml",
    "./cangjie6.dict.yaml",
    "./cangjie6.extsimp.dict.yaml",
    "./cangjie6_express.schema.yaml"
]
SIMP_DICT = "cangjie6.extsimp.dict.yaml"
USER_DICT = "./user.dict"

def backup(inst_path):
    if os.path.exists(inst_path):
        current = time.localtime(time.time())
        time_str = time.strftime("%Y-%m-%d_%H-%M-%S", current)
        backup_path = '{}.{}.bak'.format(inst_path, time_str)
        print("Installation path os exists! Backup it to {}...".format(backup_path))
        move(inst_path, backup_path)

        return True
    else:
        return False


def install(inst_path):
    backup(inst_path)

    print("Start to install rime in {}".format(inst_path))
    os.mkdir(inst_path)
    for item in INST_FILE:
        print("Copying file {}...".format(item), end="")
        copyfile(item, '/'.join((inst_path, item)))
        print("Done!")


def merge_dict(inst_path):
    dict_path = '/'.join((inst_path, SIMP_DICT))
    if not os.path.exists(dict_path):
        print("Not find dict file {}! Skipping...".format(dict_path))
        return False

    print("Start to merge dict {}...".format(dict_path))
    lines = None
    with open(dict_path, 'r') as simpp:
        lines = simpp.readlines()

    if lines is None:
        return False

    start = 0
    while lines[start] != '...\n':
        start += 1

    start += 1
    if start >= len(lines):
        return False

    head = lines[:start]
    tail = lines[lines.index(END) + 1:] if END in lines else lines[start:]

    head.append(BEGIN)
    head.append(HINT)

    with open(USER_DICT) as userp:
        head.extend(userp.readlines())

    head.append(END)
    head.extend(tail)

    with open(dict_path, 'w') as simpp:
        simpp.writelines(head)


if __name__ == '__main__':
    if len(sys.argv) == 2:
        if sys.argv[1] in INST_PATH.keys():
            install(sys.argv[1])
        elif sys.argv[1] == 'merge':
            list(map(merge_dict, INST_PATH.values()))
        else:
            print("No such a installation option!")
    else:
        print("Wrong parameter amount!")
